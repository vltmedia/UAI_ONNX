name: Build - Release

on:
  workflow_dispatch:
  release:
    types: [published]   # Triggers the workflow on a new release creation

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Solution in Any CPU Configuration
        run: dotnet build --configuration Release --property Platform="Any CPU" || dotnet build --configuration Release

      - name: Publish Package
        run: dotnet pack --configuration Release --property Platform="Any CPU" --output ./artifacts || dotnet pack --configuration Release --output ./artifacts

      - name: Upload .dll artifact to GitHub Actions
        uses: actions/upload-artifact@v3
        with:
          name: UAI_ONNX_dll
          path: './bin/Release/net8.0/UAI_ONNX.dll'

      - name: Upload .pdb artifact to GitHub Actions
        uses: actions/upload-artifact@v3
        with:
          name: UAI_ONNX_pdb
          path: './bin/Release/net8.0/UAI_ONNX.pdb'

      - name: Upload .deps.json artifact to GitHub Actions
        uses: actions/upload-artifact@v3
        with:
          name: UAI_ONNX_deps_json
          path: './bin/Release/net8.0/UAI_ONNX.deps.json'

      - name: Upload .nupkg artifact to GitHub Actions
        uses: actions/upload-artifact@v3
        with:
          name: nupkg
          path: './artifacts/*.nupkg' # Path to the .nupkg file generated by dotnet pack

  release:
    runs-on: ubuntu-latest
    needs: build  # Ensures this job runs after the build job

    steps:
      - name: Download .dll artifact
        uses: actions/download-artifact@v3
        with:
          name: UAI_ONNX_dll

      - name: Download .pdb artifact
        uses: actions/download-artifact@v3
        with:
          name: UAI_ONNX_pdb

      - name: Download .deps.json artifact
        uses: actions/download-artifact@v3
        with:
          name: UAI_ONNX_deps_json

      - name: Download .nupkg artifact
        uses: actions/download-artifact@v3
        with:
          name: nupkg

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .dll to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: './UAI_ONNX.dll'
          asset_name: UAI_ONNX_${{ github.ref_name }}.dll
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .pdb to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: './UAI_ONNX.pdb'
          asset_name: UAI_ONNX_${{ github.ref_name }}.pdb
          asset_content_type: application/x-msdownload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .deps.json to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: './UAI_ONNX.deps.json'
          asset_name: UAI_ONNX_${{ github.ref_name }}.deps.json
          asset_content_type: application/json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload .nupkg to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: './artifacts/input.nupkg' # Ensure this matches the downloaded path
          asset_name: SharpREST_${{ github.ref_name }}.nupkg
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push generated package to Nuget registry
        run: dotnet nuget push ./artifacts/*.nupkg --api-key ${{ secrets.NUGET_TOKEN }} --source https://api.nuget.org/v3/index.json
